/*
PER COMPIALRE:
  dart compile exe ./test/ppe_test.dart

PER ESEGUIRE:
  start .\test\ppe_test.exe

*/

import 'package:smartsoadsense_core_package/SmartRoadSense-Core-Package.dart';
import 'package:test/test.dart';

import 'SmartRoadSenseTest.dart';

import 'dart:io';

List<DataEntry> readDataFromFile(File file) {
  List<DataEntry> list = new List<DataEntry>.empty(growable: true);

  var lines = file.readAsLinesSync();

  lines.forEach((line) {
    var splits = line.split(";");
    if (splits[4].isNotEmpty) {
      int ts = int.parse(splits[0]);
      double ax = double.parse(splits[1]);
      double ay = double.parse(splits[2]);
      double az = double.parse(splits[3]);
      double lat = double.parse(splits[4]);
      double lng = double.parse(splits[5]);
      double vel = double.parse(splits[6]);

      list.add(DataEntry.constructor2(ts, ax, ay, az, lat, lng, vel, 0, 0));
    }
  });
  return list;
}

const String _filePath = "C:\\Users\\basil\\Documents\\SRS-01.csv";
//const String _filePath = "C:\\Users\\basil\\Documents\\SRS-01-Test_300.csv";

//const String _filePath = "C:\\Users\\basil\\Documents\\SRS-01-Test_150.csv";

List<double> _javaResults = new List<double>.unmodifiable([
  0.234468658,
  0.108844164,
  0.147456564,
  0.123911231,
  0.096303737,
  0.146242353,
  0.208578152,
  0.236431209,
  0.223073976,
  0.2153191,
  0.329313702,
  0.28676552,
  0.210953232,
  0.241892564,
  0.288302383,
  0.358630915,
  0.273868719,
  0.229664474,
  0.22107377,
  0.231710557,
  0.342749272,
  0.241633453,
  0.221446391,
  0.106013303,
  0.047984013,
  0.106113977,
  0.06085813,
  0.056178748,
  0.049411404,
  0.04849267,
  0.062430996,
  0.056631153,
  0.071807625,
  0.084163028,
  0.076006005,
  0.068373747,
  0.068360436,
  0.064083975,
  0.052533603,
  0.05763745,
  0.057723491,
  0.060380271,
  0.034367649,
  0.069100248,
  0.041221092,
  0.059034852,
  0.051851568,
  0.062193933,
  0.086122409,
  0.076134447,
  0.073793591,
  0.061145671,
  0.054932601,
  0.051713031,
  0.070770213,
  0.068727708,
  0.079832944,
  0.066684762,
  0.063243794,
  0.094601173,
  0.081855839,
  0.114680242,
  0.201344227,
  0.165518189,
  0.160563241,
  0.16490494,
  0.161358036,
  0.135360328,
  0.111382654,
  0.174031064,
  0.128642001,
  0.149484457,
  0.215282484,
  0.285746509,
  0.311727781,
  0.276125894,
  0.218526458,
  0.25130583,
  0.239833213,
  0.359557855,
  0.246478181,
  0.451182159,
  0.253777941,
  0.207710546,
  0.419618005,
  0.403721939,
  0.303794439,
  0.357396859,
  0.259232832,
  0.503817399,
  0.228555657,
  0.413074252,
  0.45887029,
  0.408225199,
  0.192348728,
  0.058484308,
  0.045921152,
  0.051403083,
  0.168366947,
  0.060905969,
  0.086406473,
  0.068757343,
  0.08043518,
  0.066060513,
  0.077948339,
  0.094223029,
  0.111981828,
  0.128843505,
  0.053155195,
  0.332065054,
  0.061407936,
  0.091363837,
  0.148582494,
  0.064287761,
  0.029329105,
  0.082700972,
  0.051384633,
  0.043620944,
  0.034969902,
  0.0322991,
  0.047661353,
  0.184615818,
  0.033200984,
  0.01957953,
  0.039527947,
  0.064443718,
  0.037863603,
  0.03901959,
  0.015172038,
  0.024411405,
  0.017675016,
  0.01894728,
  0.020893208,
  0.019472298,
  0.018944986,
  0.071536871,
  0.064806329,
  0.084266021,
  0.066468846,
  0.047383542,
  0.029349624,
  0.036022116,
  0.026965647,
  0.059657421,
  0.015418231,
  0.036788171,
  0.093399563,
  0.046078531,
  0.254872486,
  0.15254236,
  0.052009099,
  0.08834566,
  0.066577306,
  0.091992865,
  0.084729949,
  0.041880109,
  0.092462616,
  0.083707192,
  0.052030475,
  0.048935178,
  0.0581619,
  0.104107163,
  0.061102535,
  0.085000092,
  0.066743196,
  0.053972909,
  0.335057177,
  0.038117354,
  0.02252374,
  0.032108284,
  0.0952942,
  0.044687936,
  0.055423457,
  0.059577248,
  0.031408253,
  0.053652847,
  0.02593621,
  0.031954127,
  0.021794851,
  0.082614451,
  0.027802746,
  0.028906143,
  0.032267514,
  0.046862416,
  0.028712263,
  0.039946006,
  0.115773591,
  0.047282347,
  0.079513851,
  0.391820848,
  0.30099642,
  0.454451483,
  0.142841865,
  0.210636807,
  0.326006699,
  0.355213622,
  0.161140555,
  0.593298794,
  0.252985354,
  0.523658714,
  0.491325469,
  0.238165212,
  0.504579799,
  0.244782012,
  0.387127793,
  0.153670172,
  0.299043605,
  0.143419899,
  0.186392131,
  0.251873243,
  0.234834572,
  0.155577212,
  0.145211561,
  0.248792758,
  0.155744795,
  0.181884006,
  0.238088615,
  0.248195547,
  0.159100225,
  0.338101801,
  0.298094966,
  0.185326056,
  0.277411298,
  0.132891636,
  0.154479526,
  0.116945382,
  0.25913781,
  0.356263114,
  0.197550628,
  0.063528361,
  0.127661148,
  0.34230466,
  0.3623726,
  0.109609156,
  0.138488555,
  0.161458983,
  0.131176883,
  0.304348662,
  0.12286287,
  0.277008127,
  0.394775732,
  0.472279465,
  0.47130674,
  0.345930323,
  0.448012865,
  0.244874265,
  0.111025346,
  0.146785804,
  0.196943606,
  0.217088023,
  0.421219243,
  0.478521999,
  0.547572458,
  0.179982476,
  0.23111974,
  0.323988665,
  0.179792182,
  0.1764469,
  0.330886654,
  0.577483293,
  0.762811535,
  0.62145417,
  0.295516672,
  0.283388365,
  0.141145153,
  0.06731523,
  0.150147558,
  0.184925923,
  0.088318011,
  0.117739253,
  0.248968274,
  0.067822662,
  0.128888849,
  0.130437739,
  0.078625106,
  0.057605989,
  0.048911731,
  0.045724987,
  0.372120983,
  0.21556788,
  0.211745175,
  0.256142115,
  0.12869962,
  0.056582169,
  0.103915799,
  0.139871012,
  0.112636823,
  0.106033099,
  0.075005944,
  0.06233935,
  0.108673065,
  0.080974823,
  0.042027769,
  0.053680243,
  0.071886988,
  0.110459685,
  0.135844911,
  0.062072646,
  0.055197472,
  0.059651819,
  0.047668678,
  0.101000914,
  0.049005415,
  0.095191301,
  0.081031789,
  0.080780859,
  0.10823221,
  0.059417198,
  0.037799466,
  0.02857558,
  0.04151374,
  0.072532857,
  0.032325083,
  0.049761938,
  0.075454798,
  0.074306448,
  0.0743406,
  0.081430813,
  0.071055934,
  0.110982272,
  0.045481767,
  0.092770904,
  0.084996964,
  0.053304073,
  0.047085717,
  0.04537739,
  0.036881721,
  0.044575114,
  0.061590162,
  0.058116276,
  0.069692434,
  0.124244588,
  0.050745006,
  0.038096537,
  0.061055242,
  0.059995027,
  0.129877807,
  0.055116918,
  0.091392082,
  0.077334066,
  0.062231654,
  0.0570701,
  0.113312033,
  0.114576371,
  0.243579262,
  0.076817645,
  0.057746353,
  0.174162932,
  0.129487055,
  0.076441267,
  0.084838021,
  0.109085191,
  0.420057624,
  0.651148361,
  0.188200081,
  0.242810071,
  0.192536428,
  0.05975534,
  0.062714359,
  0.066358361,
  0.09912421,
  0.409044253,
  0.07790187,
  0.129663743,
  0.069585661,
  0.037105201,
  0.072267834,
  0.108240361,
  0.185928805,
  0.124753064,
  0.067760573,
  0.190824017,
  0.186300451,
  0.30164295,
  0.106573495,
  0.158380598,
  0.071262992
]);

void testFromCsvData() {
  //const String _filePath = "";

  List<Result> results = new List<Result>.empty(growable: true);

  var engine = new Engine.constructor1();

  //event
  engine.computationCompleted.forEach((e) => results.add(e.result));

  File file = new File(_filePath);

  var entry = readDataFromFile(file);

  //per debugging
  //engine.qui = 0;

  entry.forEach((element) {
    engine.register(element);
  });

  //per debugging
  //print(engine.qui); risulatato: 377

  //assert(_javaResults.length == results.length);

  List<double> impl = new List.empty(growable: true);

  results.forEach((element) {
    impl.add(element.ppe);
  });

  //for (var item in results) print(item);

/*

  for (var item in results) {
    print("PPe: ${item.ppe}");
    print("PpeX: ${item.ppeX}");
    print("PpeY: ${item.ppeY}");
    print("PpeZ: ${item.ppeZ}");
    print("Longitude: ${item.longitude}");
    print("Latitude: ${item.latitudee}");
    print("Speed: ${item.speed}");
    print("Accuracy: ${item.accuracy}");
    print("Bearing: ${item.bearing}");
  }

*/

/*
  impl.forEach((element) {
    print(element);
  });
*/
  CheckExtensions.assertError(impl, _javaResults);
}

void benchmarkFromCsvData() {
  var engine = new Engine.constructor1();

  List<DataEntry> entries = new List<DataEntry>.empty(growable: true);

  File file = new File(_filePath);

  for (var item in readDataFromFile(file)) {
    entries.add(item);
  }

  var sw = new Stopwatch()..start();

  for (int i = 0; i < 100; i++) {
    entries.forEach((element) => engine.register(element));
  }

  sw.stop();

  print("Time: ${sw.elapsed}");
  print("Ms: ${sw.elapsedMilliseconds}");

  String? name = stdin.readLineSync();

  //In debug mode, did complete in 74Ms 26/12/2021 (Amd R5 4000 series)
  //did complete in 50ms 28/12/2021
  assert(sw.elapsedMilliseconds <= 200);
}

void main() /*async*/ {
  //const String _filePath = "";

  test("Test From Csv Data", () {
    expect(testFromCsvData, returnsNormally);
  }, skip: "File CSV non corretto");
  //expect(testFromCsvData, returnsNormally);

  test("Test Benchmark From Csv Data", () {
    expect(benchmarkFromCsvData, returnsNormally);
  });
  //expect(benchmarkFromCsvData, returnsNormally);
}
